/*
*  Copyright (c) 2018, WSO2 Inc. (http://www.wso2.org) All Rights Reserved.
*
*  WSO2 Inc. licenses this file to you under the Apache License,
*  Version 2.0 (the "License"); you may not use this file except
*  in compliance with the License.
*  You may obtain a copy of the License at
*
*    http://www.apache.org/licenses/LICENSE-2.0
*
* Unless required by applicable law or agreed to in writing,
* software distributed under the License is distributed on an
* "AS IS" BASIS, WITHOUT WARRANTIES OR CONDITIONS OF ANY
* KIND, either express or implied.  See the License for the
* specific language governing permissions and limitations
* under the License.
*/
package org.wso2.extension.siddhi.store.cassandra.util;

import org.wso2.extension.siddhi.store.cassandra.exception.CassandraTableException;
import org.wso2.siddhi.query.api.annotation.Annotation;
import org.wso2.siddhi.query.api.definition.Attribute;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.List;

/**
 * Class for holding various utility methods required by by the HBase table implementation.
 */
public class CassandraTableUtils {

    private static volatile SecureRandom numberGenerator = null;
    private static final long MSB = 0x8000000000000000L;

    /**
     * Utility method which can be used to check if a given string instance is null or empty.
     *
     * @param field the string instance to be checked.
     * @return true if the field is null or empty.
     */
    public static boolean isEmpty(String field) {
        return (field == null || field.trim().length() == 0);
    }

    /**
     * This method is used to extract the primary keys from the String provided by the user.
     *
     * @param schema schema of the table defined by the user.
     * @param primaryKeys primary keys defined by the user
     * @return List of primary keys.
     */
    public static List<Attribute> initPrimaryKeys(List<Attribute> schema, Annotation primaryKeys) {
        String[] keys = primaryKeys.getElements().get(0).getValue().split(",");
        ArrayList<Attribute> pk = new ArrayList<>();
        for (Attribute attribute : schema) {
            for (String key : keys) {
                if (key.trim().equals(attribute.getName().trim())) {
                    pk.add(attribute);
                    break;
                }
            }
        }
        if (pk.size() == 0) {
            throw new CassandraTableException("Please enter a primary within the defined table columns");
        }
        return pk;
    }

    /**
     * This method converts Siddhi data types to Cassandra data types.
     * @param siddhiDataType siddhi data type of the attribute
     * @return returns the relevent String to he relevent cassandra data type
     */
    public static String dataConversionToCassandra(Attribute.Type siddhiDataType) {
        String cassandraDatatype;
        switch (siddhiDataType) {
            case STRING:
                cassandraDatatype = "text";
                break;
            case INT:
                cassandraDatatype = "int";
                break;
            case LONG:
                cassandraDatatype = "bigint";
                break;
            case DOUBLE:
                cassandraDatatype = "double";
                break;
            case FLOAT:
                cassandraDatatype = "float";
                break;
            case BOOL:
                cassandraDatatype = "boolean";
                break;
            case OBJECT:
                cassandraDatatype = "blob";
                break;
            default:
                cassandraDatatype = "";
        }
        return cassandraDatatype;
    }

    /**
     * This method will return a randomly generated UUID for the primary key.
     * @return returns the generated UUID
     */
    public static String generatePrimaryKeyValue() {
        return uuidGenerator();
    }

    /**
     * Primary key is generated by a this UUID generator.
     */
    private static String uuidGenerator() {
        SecureRandom ng = numberGenerator;
        if (ng == null) {
            numberGenerator = ng = new SecureRandom();
        }
        return Long.toHexString(MSB | ng.nextLong()) + Long.toHexString(MSB | ng.nextLong());
    }


}
